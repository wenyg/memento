/**
 * ‰∏ªÊ†ëÊèê‰æõËÄÖ - ÁÆ°ÁêÜ‰∏çÂêåËßÜÂõæÊ®°Âºè
 */

import * as vscode from 'vscode';
import { ViewMode } from '../types';
import { getNotesRootPath, loadMementoConfig } from '../config';
import { MdFileItem, TagItem, CalendarItem } from './base';
import { MdFilesProvider } from './mdFilesProvider';
import { TagTreeProvider } from './tagTreeProvider';
import { CalendarProvider } from './calendarProvider';
import { TodoTreeProvider, TodoTreeItem } from './todoTreeProvider';

export class MainTreeProvider implements vscode.TreeDataProvider<MdFileItem | TagItem | CalendarItem | TodoTreeItem> {
    private _onDidChangeTreeData: vscode.EventEmitter<MdFileItem | TagItem | CalendarItem | TodoTreeItem | undefined | null | void> = new vscode.EventEmitter<MdFileItem | TagItem | CalendarItem | TodoTreeItem | undefined | null | void>();
    readonly onDidChangeTreeData: vscode.Event<MdFileItem | TagItem | CalendarItem | TodoTreeItem | undefined | null | void> = this._onDidChangeTreeData.event;

    private currentMode: ViewMode = ViewMode.FILES;
    private fileProvider: MdFilesProvider;
    private tagProvider: TagTreeProvider;
    private calendarProvider: CalendarProvider;
    private todoProvider: TodoTreeProvider;

    constructor() {
        this.fileProvider = new MdFilesProvider();
        this.tagProvider = new TagTreeProvider();
        this.calendarProvider = new CalendarProvider();
        this.todoProvider = new TodoTreeProvider();

        // ÁõëÂê¨ÊâÄÊúâÊèê‰æõËÄÖÁöÑÂèòÂåñ
        this.fileProvider.onDidChangeTreeData(() => {
            if (this.currentMode === ViewMode.FILES) {
                this._onDidChangeTreeData.fire();
            }
        });

        this.tagProvider.onDidChangeTreeData(() => {
            if (this.currentMode === ViewMode.TAGS) {
                this._onDidChangeTreeData.fire();
            }
        });

        this.calendarProvider.onDidChangeTreeData(() => {
            if (this.currentMode === ViewMode.CALENDAR) {
                this._onDidChangeTreeData.fire();
            }
        });

        this.todoProvider.onDidChangeTreeData(() => {
            if (this.currentMode === ViewMode.TODO) {
                this._onDidChangeTreeData.fire();
            }
        });
    }

    switchToFileView(): void {
        this.currentMode = ViewMode.FILES;
        this._onDidChangeTreeData.fire();
    }

    switchToTagView(): void {
        this.currentMode = ViewMode.TAGS;
        this._onDidChangeTreeData.fire();
    }

    switchToCalendarView(): void {
        this.currentMode = ViewMode.CALENDAR;
        this._onDidChangeTreeData.fire();
    }

    switchToSettingsView(): void {
        this.currentMode = ViewMode.SETTINGS;
        this._onDidChangeTreeData.fire();
    }

    switchToTodoView(): void {
        this.currentMode = ViewMode.TODO;
        this._onDidChangeTreeData.fire();
    }

    refresh(): void {
        if (this.currentMode === ViewMode.FILES) {
            this.fileProvider.refresh();
        } else if (this.currentMode === ViewMode.TAGS) {
            this.tagProvider.refresh();
        } else if (this.currentMode === ViewMode.CALENDAR) {
            this.calendarProvider.refresh();
        } else if (this.currentMode === ViewMode.TODO) {
            this.todoProvider.refresh();
        }
    }

    getTodoProvider(): TodoTreeProvider {
        return this.todoProvider;
    }

    getTreeItem(element: MdFileItem | TagItem | CalendarItem | TodoTreeItem): vscode.TreeItem {
        return element;
    }

    getChildren(element?: MdFileItem | TagItem | CalendarItem | TodoTreeItem): Thenable<(MdFileItem | TagItem | CalendarItem | TodoTreeItem)[]> {
        if (this.currentMode === ViewMode.FILES) {
            return this.fileProvider.getChildren(element as MdFileItem);
        } else if (this.currentMode === ViewMode.TAGS) {
            return this.tagProvider.getChildren(element as TagItem);
        } else if (this.currentMode === ViewMode.CALENDAR) {
            return this.calendarProvider.getChildren(element as CalendarItem);
        } else if (this.currentMode === ViewMode.TODO) {
            return this.todoProvider.getChildren(element as TodoTreeItem);
        } else {
            // SETTINGS Ê®°Âºè
            return this.getSettingsItems(element as CalendarItem);
        }
    }

    private async getSettingsItems(element?: CalendarItem): Promise<CalendarItem[]> {
        const notesPath = await getNotesRootPath();
        if (!notesPath) {
            return [];
        }

        const config = await loadMementoConfig(notesPath);

        // Ê†πÁ∫ßÂà´ - ÊòæÁ§∫ÂàÜÁ±ª
        if (!element) {
            return [
                new CalendarItem('üìÇ Á¨îËÆ∞Ê†πÁõÆÂΩï', vscode.TreeItemCollapsibleState.Collapsed, 'category'),
                new CalendarItem('üìÑ Á¨îËÆ∞ÁÆ°ÁêÜ', vscode.TreeItemCollapsibleState.Collapsed, 'category'),
                new CalendarItem('üìÅ Êñá‰ª∂ËøáÊª§', vscode.TreeItemCollapsibleState.Collapsed, 'category'),
                new CalendarItem('üìù Êó•ËÆ∞ËÆæÁΩÆ', vscode.TreeItemCollapsibleState.Collapsed, 'category'),
                new CalendarItem('üìä Âë®Êä•ËÆæÁΩÆ', vscode.TreeItemCollapsibleState.Collapsed, 'category'),
                new CalendarItem('üîß Â∑•ÂÖ∑', vscode.TreeItemCollapsibleState.Collapsed, 'category')
            ];
        }

        // ÂàÜÁ±ªÁ∫ßÂà´ - ÊòæÁ§∫ËÆæÁΩÆ
        if (element.label === 'üìÇ Á¨îËÆ∞Ê†πÁõÆÂΩï') {
            const vscodeConfig = vscode.workspace.getConfiguration('memento');
            const configuredPath: string = vscodeConfig.get('notesPath', '');

            return [
                new CalendarItem(
                    `Ë∑ØÂæÑ: ${configuredPath || '(‰ΩøÁî®ÂΩìÂâçÂ∑•‰ΩúÂå∫)'}`,
                    vscode.TreeItemCollapsibleState.None,
                    'action',
                    () => {
                        vscode.commands.executeCommand('workbench.action.openSettings', 'memento.notesPath');
                    }
                ),
                new CalendarItem(
                    'üìÇ Âú® VSCode ‰∏≠ÊâìÂºÄÁ¨îËÆ∞ÁõÆÂΩï',
                    vscode.TreeItemCollapsibleState.None,
                    'command',
                    async () => {
                        const notesPath = await getNotesRootPath();
                        if (notesPath) {
                            const uri = vscode.Uri.file(notesPath);
                            await vscode.commands.executeCommand('vscode.openFolder', uri, { forceNewWindow: true });
                        } else {
                            vscode.window.showErrorMessage('Êú™ÊâæÂà∞Á¨îËÆ∞ÁõÆÂΩï');
                        }
                    }
                )
            ];
        }

        if (element.label === 'üìÑ Á¨îËÆ∞ÁÆ°ÁêÜ') {
            return [
                new CalendarItem(
                    `Êñ∞Á¨îËÆ∞ÈªòËÆ§Ë∑ØÂæÑ: ${config.defaultNotePath}`,
                    vscode.TreeItemCollapsibleState.None,
                    'action',
                    async () => {
                        const input = await vscode.window.showInputBox({
                            prompt: 'ËÆæÁΩÆÊñ∞Á¨îËÆ∞ÁöÑÈªòËÆ§Â≠òÊîæË∑ØÂæÑ',
                            value: config.defaultNotePath,
                            placeHolder: '‰æãÂ¶Ç: Êú™ÂàÜÁ±ª, Â∑•‰ΩúÁ¨îËÆ∞, Â≠¶‰π†Á¨îËÆ∞'
                        });
                        if (input !== undefined) {
                            const { saveMementoConfig } = await import('../config.js');
                            const newConfig = { ...config, defaultNotePath: input };
                            await saveMementoConfig(notesPath, newConfig);
                            vscode.window.showInformationMessage('‚úì ÈªòËÆ§Á¨îËÆ∞Ë∑ØÂæÑÂ∑≤Êõ¥Êñ∞');
                            this.refresh();
                        }
                    }
                )
            ];
        }

        if (element.label === 'üìÅ Êñá‰ª∂ËøáÊª§') {
            return [
                new CalendarItem(
                    `ÊéíÈô§Êñá‰ª∂Â§π: ${config.excludeFolders.length > 0 ? config.excludeFolders.join(', ') : '(Êú™ËÆæÁΩÆ)'}`,
                    vscode.TreeItemCollapsibleState.None,
                    'action',
                    async () => {
                        const input = await vscode.window.showInputBox({
                            prompt: 'ËæìÂÖ•Ë¶ÅÊéíÈô§ÁöÑÊñá‰ª∂Â§πÔºàÈÄóÂè∑ÂàÜÈöîÔºâ',
                            value: config.excludeFolders.join(', '),
                            placeHolder: '‰æãÂ¶Ç: node_modules, .git, temp*'
                        });
                        if (input !== undefined) {
                            const { saveMementoConfig } = await import('../config.js');
                            const newConfig = { ...config, excludeFolders: input.split(',').map(s => s.trim()).filter(s => s) };
                            await saveMementoConfig(notesPath, newConfig);
                            vscode.window.showInformationMessage('‚úì ÊéíÈô§Êñá‰ª∂Â§πËÆæÁΩÆÂ∑≤Êõ¥Êñ∞');
                            this.refresh();
                        }
                    }
                )
            ];
        }

        if (element.label === 'üìù Êó•ËÆ∞ËÆæÁΩÆ') {
            return [
                new CalendarItem(
                    `Â≠òÂÇ®Ë∑ØÂæÑ: ${config.dailyNotesPath}`,
                    vscode.TreeItemCollapsibleState.None,
                    'action',
                    async () => {
                        const input = await vscode.window.showInputBox({
                            prompt: 'Êó•ËÆ∞Â≠òÂÇ®Ë∑ØÂæÑ',
                            value: config.dailyNotesPath,
                            placeHolder: 'Áõ∏ÂØπË∑ØÂæÑÊàñÁªùÂØπË∑ØÂæÑ'
                        });
                        if (input !== undefined) {
                            const { saveMementoConfig } = await import('../config.js');
                            const newConfig = { ...config, dailyNotesPath: input };
                            await saveMementoConfig(notesPath, newConfig);
                            vscode.window.showInformationMessage('‚úì Êó•ËÆ∞Ë∑ØÂæÑÂ∑≤Êõ¥Êñ∞');
                            this.refresh();
                        }
                    }
                ),
                new CalendarItem(
                    `Êñá‰ª∂ÂêçÊ†ºÂºè: ${config.dailyNoteFileNameFormat}`,
                    vscode.TreeItemCollapsibleState.None,
                    'action',
                    async () => {
                        const input = await vscode.window.showInputBox({
                            prompt: 'Êó•ËÆ∞Êñá‰ª∂ÂêçÊ†ºÂºè',
                            value: config.dailyNoteFileNameFormat,
                            placeHolder: 'ÂèòÈáè: {{year}} {{month}} {{day}} {{week}} {{title}} {{date}}'
                        });
                        if (input !== undefined) {
                            const { saveMementoConfig } = await import('../config.js');
                            const newConfig = { ...config, dailyNoteFileNameFormat: input };
                            await saveMementoConfig(notesPath, newConfig);
                            vscode.window.showInformationMessage('‚úì Êó•ËÆ∞Êñá‰ª∂ÂêçÊ†ºÂºèÂ∑≤Êõ¥Êñ∞');
                            this.refresh();
                        }
                    }
                ),
                new CalendarItem(
                    `Ê®°ÊùøË∑ØÂæÑ: ${config.dailyNoteTemplatePath || '(‰ΩøÁî®ÈªòËÆ§Ê®°Êùø)'}`,
                    vscode.TreeItemCollapsibleState.None,
                    'action',
                    async () => {
                        const input = await vscode.window.showInputBox({
                            prompt: 'Êó•ËÆ∞Ê®°ÊùøÊñá‰ª∂Ë∑ØÂæÑ',
                            value: config.dailyNoteTemplatePath,
                            placeHolder: 'Áõ∏ÂØπË∑ØÂæÑÊàñÁªùÂØπË∑ØÂæÑÔºåÁïôÁ©∫‰ΩøÁî®ÈªòËÆ§Ê®°Êùø'
                        });
                        if (input !== undefined) {
                            const { saveMementoConfig } = await import('../config.js');
                            const newConfig = { ...config, dailyNoteTemplatePath: input };
                            await saveMementoConfig(notesPath, newConfig);
                            vscode.window.showInformationMessage('‚úì Êó•ËÆ∞Ê®°ÊùøË∑ØÂæÑÂ∑≤Êõ¥Êñ∞');
                            this.refresh();
                        }
                    }
                )
            ];
        }

        if (element.label === 'üìä Âë®Êä•ËÆæÁΩÆ') {
            return [
                new CalendarItem(
                    `Â≠òÂÇ®Ë∑ØÂæÑ: ${config.weeklyNotesPath}`,
                    vscode.TreeItemCollapsibleState.None,
                    'action',
                    async () => {
                        const input = await vscode.window.showInputBox({
                            prompt: 'Âë®Êä•Â≠òÂÇ®Ë∑ØÂæÑ',
                            value: config.weeklyNotesPath,
                            placeHolder: 'Áõ∏ÂØπË∑ØÂæÑÊàñÁªùÂØπË∑ØÂæÑ'
                        });
                        if (input !== undefined) {
                            const { saveMementoConfig } = await import('../config.js');
                            const newConfig = { ...config, weeklyNotesPath: input };
                            await saveMementoConfig(notesPath, newConfig);
                            vscode.window.showInformationMessage('‚úì Âë®Êä•Ë∑ØÂæÑÂ∑≤Êõ¥Êñ∞');
                            this.refresh();
                        }
                    }
                ),
                new CalendarItem(
                    `Êñá‰ª∂ÂêçÊ†ºÂºè: ${config.weeklyNoteFileNameFormat}`,
                    vscode.TreeItemCollapsibleState.None,
                    'action',
                    async () => {
                        const input = await vscode.window.showInputBox({
                            prompt: 'Âë®Êä•Êñá‰ª∂ÂêçÊ†ºÂºè',
                            value: config.weeklyNoteFileNameFormat,
                            placeHolder: 'ÂèòÈáè: {{year}} {{month}} {{day}} {{week}} {{title}} {{date}}'
                        });
                        if (input !== undefined) {
                            const { saveMementoConfig } = await import('../config.js');
                            const newConfig = { ...config, weeklyNoteFileNameFormat: input };
                            await saveMementoConfig(notesPath, newConfig);
                            vscode.window.showInformationMessage('‚úì Âë®Êä•Êñá‰ª∂ÂêçÊ†ºÂºèÂ∑≤Êõ¥Êñ∞');
                            this.refresh();
                        }
                    }
                ),
                new CalendarItem(
                    `Ê®°ÊùøË∑ØÂæÑ: ${config.weeklyNoteTemplatePath || '(‰ΩøÁî®ÈªòËÆ§Ê®°Êùø)'}`,
                    vscode.TreeItemCollapsibleState.None,
                    'action',
                    async () => {
                        const input = await vscode.window.showInputBox({
                            prompt: 'Âë®Êä•Ê®°ÊùøÊñá‰ª∂Ë∑ØÂæÑ',
                            value: config.weeklyNoteTemplatePath,
                            placeHolder: 'Áõ∏ÂØπË∑ØÂæÑÊàñÁªùÂØπË∑ØÂæÑÔºåÁïôÁ©∫‰ΩøÁî®ÈªòËÆ§Ê®°Êùø'
                        });
                        if (input !== undefined) {
                            const { saveMementoConfig } = await import('../config.js');
                            const newConfig = { ...config, weeklyNoteTemplatePath: input };
                            await saveMementoConfig(notesPath, newConfig);
                            vscode.window.showInformationMessage('‚úì Âë®Êä•Ê®°ÊùøË∑ØÂæÑÂ∑≤Êõ¥Êñ∞');
                            this.refresh();
                        }
                    }
                )
            ];
        }

        if (element.label === 'üîß Â∑•ÂÖ∑') {
            return [
                new CalendarItem(
                    'Â°´ÂÖÖ Front Matter Date Â≠óÊÆµ',
                    vscode.TreeItemCollapsibleState.None,
                    'command',
                    () => vscode.commands.executeCommand('memento.fillFrontMatterDate')
                )
            ];
        }

        return [];
    }
}

